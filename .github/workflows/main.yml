name: üß† Android Permission Auto Diagnostic

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  permission-check:
    runs-on: ubuntu-latest

    steps:
      - name: üß© Checkout Repository
        uses: actions/checkout@v3

      - name: ‚öôÔ∏è Setup Java & Flutter
        uses: actions/setup-java@v3
        with:
          java-version: '17'
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'

      - name: üì¶ Install Dependencies
        run: flutter pub get

      ###########################################################
      # üß† STATIC PERMISSION SCAN - No build, just analysis
      ###########################################################
      - name: üîç Static Manifest Permission Scan
        run: |
          echo "---------------------------------------------------"
          echo "üîç Checking AndroidManifest.xml for required permissions"
          echo "---------------------------------------------------"
          MANIFEST="android/app/src/main/AndroidManifest.xml"
          if [ ! -f "$MANIFEST" ]; then
            echo "‚ùå Manifest file not found at $MANIFEST"
            exit 1
          fi

          REQUIRED_PERMS=("INTERNET" "ACCESS_NETWORK_STATE" "READ_MEDIA_IMAGES" "READ_MEDIA_VIDEO" "READ_MEDIA_AUDIO" "READ_EXTERNAL_STORAGE")
          MISSING=()

          for PERM in "${REQUIRED_PERMS[@]}"; do
            if ! grep -q "$PERM" "$MANIFEST"; then
              MISSING+=("$PERM")
            fi
          done

          if [ ${#MISSING[@]} -eq 0 ]; then
            echo "‚úÖ All essential permissions are present in AndroidManifest.xml"
          else
            echo "‚ö†Ô∏è Missing permissions detected:"
            for PERM in "${MISSING[@]}"; do
              echo "‚û°Ô∏è Add: <uses-permission android:name=\"android.permission.$PERM\" />"
            done
            echo ""
            echo "üí° Tip: Android 13+ also requires READ_MEDIA_* permissions for media files."
          fi
          echo "---------------------------------------------------"

      ###########################################################
      # üß± BUILD PHASE - Catch runtime permission-related errors
      ###########################################################
      - name: üß± Build Debug APK (permission validation)
        id: build
        run: |
          echo "---------------------------------------------------"
          echo "üèóÔ∏è Building Flutter Debug APK..."
          echo "---------------------------------------------------"
          set -e
          flutter build apk --debug 2>&1 | tee build.log
        continue-on-error: true

      ###########################################################
      # üß© ERROR ANALYZER - Parse permission issues in logs
      ###########################################################
      - name: üïµÔ∏è Analyze Permission Errors
        if: always()
        run: |
          echo "---------------------------------------------------"
          echo "üïµÔ∏è Scanning build.log for permission issues..."
          echo "---------------------------------------------------"

          if grep -qi "permission" build.log; then
            echo "‚ö†Ô∏è Possible permission-related issue found:"
            grep -i "permission" build.log | tail -n 15
            echo ""
            echo "üîß Suggestions:"
            if grep -qi "READ_MEDIA_IMAGES" build.log; then
              echo "‚û°Ô∏è Add <uses-permission android:name=\"android.permission.READ_MEDIA_IMAGES\" />"
            fi
            if grep -qi "WRITE_EXTERNAL_STORAGE" build.log; then
              echo "‚û°Ô∏è Add WRITE_EXTERNAL_STORAGE with maxSdkVersion=29 (Android 10‚Äì12 only)"
            fi
            if grep -qi "MANAGE_EXTERNAL_STORAGE" build.log; then
              echo "‚û°Ô∏è Check MANAGE_EXTERNAL_STORAGE and Scoped Storage policies"
            fi
          else
            echo "‚úÖ No permission-related issues found in build logs."
          fi

      ###########################################################
      # üì§ Upload build log as artifact for manual check
      ###########################################################
      - name: üßæ Upload Build Log
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: android-permission-build-log
          path: build.log
