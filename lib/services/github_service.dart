import 'dart:convert';
import 'package:http/http.dart' as http;

class GithubService {
  static const String _githubToken = String.fromEnvironment('GITHUB_TOKEN', defaultValue: '');
  static const String _username = 'YOUR_GITHUB_USERNAME'; // ← اپنا GitHub username لکھو
  static const String _apiUrl = 'https://api.github.com';

  static bool get isConfigured => _githubToken.isNotEmpty;

  /// نیا ریپوزٹری بنا کر Flutter code اپ لوڈ کرتا ہے
  static Future<bool> uploadProject({
    required String projectName,
    required String flutterCode,
  }) async {
    if (!isConfigured) {
      print('❌ GitHub token not configured.');
      return false;
    }

    final repoName = projectName.replaceAll(' ', '_').toLowerCase();
    final repoUrl = '$_apiUrl/user/repos';

    try {
      // ✅ Step 1: Check if repo exists
      final checkRepo = await http.get(
        Uri.parse('$_apiUrl/repos/$_username/$repoName'),
        headers: {'Authorization': 'token $_githubToken'},
      );

      // ✅ Step 2: Create repo if not exists
      if (checkRepo.statusCode != 200) {
        print('🆕 Creating private repository...');
        final createRepo = await http.post(
          Uri.parse(repoUrl),
          headers: {
            'Authorization': 'token $_githubToken',
            'Content-Type': 'application/json',
          },
          body: jsonEncode({
            'name': repoName,
            'private': true,
            'description': 'Generated by Aladdin AI App Factory',
          }),
        );

        if (createRepo.statusCode != 201) {
          print('❌ Failed to create repo: ${createRepo.body}');
          return false;
        }
      }

      // ✅ Step 3: Prepare file content
      final encodedMain = base64Encode(utf8.encode(flutterCode));
      final encodedPubspec = base64Encode(utf8.encode(_defaultPubspec(projectName)));

      // ✅ Step 4: Upload main.dart
      await _uploadFile(repoName, 'lib/main.dart', encodedMain);

      // ✅ Step 5: Upload pubspec.yaml
      await _uploadFile(repoName, 'pubspec.yaml', encodedPubspec);

      print('✅ Files uploaded successfully to $repoName');
      return true;
    } catch (e) {
      print('❌ Upload error: $e');
      return false;
    }
  }

  static Future<void> _uploadFile(String repo, String path, String content) async {
    final url = '$_apiUrl/repos/$_username/$repo/contents/$path';

    final response = await http.put(
      Uri.parse(url),
      headers: {
        'Authorization': 'token $_githubToken',
        'Content-Type': 'application/json',
      },
      body: jsonEncode({
        'message': 'Add $path via Aladdin AI',
        'content': content,
      }),
    );

    if (response.statusCode != 201 && response.statusCode != 200) {
      throw Exception('Failed to upload $path: ${response.body}');
    }
  }

  static String _defaultPubspec(String projectName) => '''
name: ${projectName.replaceAll(' ', '_').toLowerCase()}
description: Generated by Aladdin App Factory
publish_to: 'none'

environment:
  sdk: '>=3.0.0 <4.0.0'

dependencies:
  flutter:
    sdk: flutter

flutter:
  uses-material-design: true
''';
}
