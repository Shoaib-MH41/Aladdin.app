import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';

class GitHubService {
  static const String _tokenKey = 'github_token';
  final FlutterSecureStorage _secureStorage = const FlutterSecureStorage();

  /// 🔹 GitHub Token حاصل کریں (پہلے secure storage → پھر fallback shared_preferences)
  Future<String?> getSavedToken() async {
    try {
      // پہلے secure storage چیک کریں
      String? token = await _secureStorage.read(key: _tokenKey);
      if (token != null && token.isNotEmpty) return token;

      // fallback اگر پہلے version میں SharedPreferences میں محفوظ تھا
      final prefs = await SharedPreferences.getInstance();
      token = prefs.getString(_tokenKey);
      if (token != null) {
        // migrate to secure storage
        await _secureStorage.write(key: _tokenKey, value: token);
        await prefs.remove(_tokenKey);
      }
      return token;
    } catch (e) {
      print('⚠️ Token read error: $e');
      return null;
    }
  }

  /// 🔹 GitHub Token محفوظ کریں (encrypted form میں)
  Future<void> saveToken(String token) async {
    try {
      await _secureStorage.write(key: _tokenKey, value: token.trim());
      print('✅ GitHub token securely saved');
    } catch (e) {
      throw Exception('❌ Token save failed: $e');
    }
  }

  /// 🔹 GitHub Token ڈیلیٹ کریں
  Future<void> removeToken() async {
    try {
      await _secureStorage.delete(key: _tokenKey);
      print('🗑️ GitHub token removed from secure storage');
    } catch (e) {
      throw Exception('❌ Token remove failed: $e');
    }
  }

  /// 🔹 GitHub کنکشن چیک کریں
  Future<bool> checkConnection() async {
    try {
      final response = await http.get(Uri.parse('https://api.github.com'));
      if (response.statusCode == 200) {
        print('✅ GitHub connection successful');
        return true;
      } else {
        print('❌ GitHub connection failed: ${response.statusCode}');
        return false;
      }
    } catch (e) {
      print('⚠️ Connection error: $e');
      return false;
    }
  }

  /// 🔹 GitHub پر repository بنائیں
  Future<String> createRepository(String repoName, String code) async {
    final token = await getSavedToken();

    if (token == null || token.isEmpty) {
      throw Exception('⚠️ GitHub token not set. Please add your token in settings.');
    }

    try {
      final response = await http.post(
        Uri.parse('https://api.github.com/user/repos'),
        headers: {
          'Authorization': 'token $token',
          'Accept': 'application/vnd.github.v3+json',
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'name': repoName.replaceAll(' ', '_'),
          'description': 'Auto-generated by Aladdin AI App Factory 🚀',
          'private': true, // 🔒 repository اب private ہوگی
          'auto_init': true,
        }),
      );

      if (response.statusCode == 201) {
        final repoData = jsonDecode(response.body);
        print('✅ Repository created: ${repoData['html_url']}');
        return repoData['html_url'] ?? 'https://github.com';
      } else {
        print('❌ GitHub error: ${response.statusCode} - ${response.body}');
        throw Exception('GitHub Error: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('⚠️ GitHub connection failed: $e');
    }
  }
}
