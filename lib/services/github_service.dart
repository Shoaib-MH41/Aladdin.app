import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter_secure_storage/flutter_secure_storage.dart';

class GitHubService {
  static const String _tokenKey = 'github_token';
  final FlutterSecureStorage _secureStorage = const FlutterSecureStorage();

  /// 🔹 GitHub Token حاصل کریں
  Future<String?> getSavedToken() async {
    try {
      String? token = await _secureStorage.read(key: _tokenKey);
      if (token != null && token.isNotEmpty) {
        print('✅ GitHub token found');
        return token;
      }
      print('⚠️ GitHub token not found');
      return null;
    } catch (e) {
      print('⚠️ [GitHubService] Token read error: $e');
      return null;
    }
  }

  /// 🔹 Token محفوظ کریں
  Future<void> saveToken(String token) async {
    try {
      await _secureStorage.write(key: _tokenKey, value: token.trim());
      print('✅ GitHub token securely saved');
    } catch (e) {
      throw Exception('ٹوکن سیو ناکام: $e');
    }
  }

  /// 🔹 Token حذف کریں
  Future<void> removeToken() async {
    try {
      await _secureStorage.delete(key: _tokenKey);
      print('🗑️ GitHub token removed');
    } catch (e) {
      throw Exception('ٹوکن ڈیلیٹ ناکام: $e');
    }
  }

  /// 🔹 GitHub کنکشن چیک کریں
  Future<bool> checkConnection() async {
    try {
      final token = await getSavedToken();
      if (token == null) return false;

      final response = await http.get(
        Uri.parse('https://api.github.com/user'),
        headers: {
          'Authorization': 'token $token',
          'Accept': 'application/vnd.github.v3+json',
        },
      );

      if (response.statusCode == 200) {
        print('✅ GitHub connection successful');
        return true;
      } else {
        print('❌ GitHub connection failed: ${response.statusCode}');
        return false;
      }
    } catch (e) {
      print('⚠️ GitHub connection error: $e');
      return false;
    }
  }

  /// 🔹 یوزرنیم حاصل کریں
  Future<String> _getUsername(String token) async {
    try {
      final response = await http.get(
        Uri.parse('https://api.github.com/user'),
        headers: {
          'Authorization': 'token $token',
          'Accept': 'application/vnd.github.v3+json',
        },
      );

      if (response.statusCode == 200) {
        final userData = jsonDecode(response.body);
        final username = userData['login'];
        print('✅ GitHub username: $username');
        return username;
      } else {
        throw Exception('یوزرنیم حاصل کرنے میں ناکامی: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('یوزرنیم حاصل کرنے میں خرابی: $e');
    }
  }

  /// 🔹 Repository نام درست کریں
  String _sanitizeRepoName(String repoName) {
    // صرف allowed characters رکھیں
    String sanitized = repoName.replaceAll(RegExp(r'[^a-zA-Z0-9._-]'), '-');
    // 100 characters سے زیادہ نہ ہو
    if (sanitized.length > 100) {
      sanitized = sanitized.substring(0, 100);
    }
    // lowercase میں تبدیل کریں
    return sanitized.toLowerCase();
  }

  /// 🔹 نیا Repository بنائیں
  Future<String> createRepository(
    String repoName, {
    String description = 'Auto-generated by Aladdin AI App Factory 🚀',
    bool private = false,
  }) async {
    final token = await getSavedToken();
    if (token == null || token.isEmpty) {
      throw Exception('⚠️ GitHub token سیٹ نہیں ہے۔ Settings میں ٹوکن شامل کریں۔');
    }

    try {
      final sanitizedRepoName = _sanitizeRepoName(repoName);
      
      final response = await http.post(
        Uri.parse('https://api.github.com/user/repos'),
        headers: {
          'Authorization': 'token $token',
          'Accept': 'application/vnd.github.v3+json',
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'name': sanitizedRepoName,
          'description': description,
          'private': private,
          'auto_init': true, // README.md خود بخود بن جائے گی
          'has_issues': true,
          'has_projects': false,
          'has_wiki': false,
        }),
      );

      if (response.statusCode == 201) {
        final repoData = jsonDecode(response.body);
        final repoUrl = repoData['html_url'];
        print('✅ Repository created: $repoUrl');
        return repoUrl;
      } else if (response.statusCode == 422) {
        // Repository پہلے سے موجود ہے
        final username = await _getUsername(token);
        final repoUrl = 'https://github.com/$username/$sanitizedRepoName';
        print('⚠️ Repository already exists: $repoUrl');
        return repoUrl;
      } else {
        final errorBody = jsonDecode(response.body);
        final errorMessage = errorBody['message'] ?? 'Unknown error';
        throw Exception('GitHub خرابی (${response.statusCode}): $errorMessage');
      }
    } catch (e) {
      throw Exception('GitHub کنکشن ناکام: $e');
    }
  }

  /// 🔹 فائل اپلوڈ کریں
  Future<void> uploadFile({
    required String repoName,
    required String filePath,
    required String content,
    String branch = 'main',
    String commitMessage = 'Auto-commit by Aladdin AI',
  }) async {
    final token = await getSavedToken();
    if (token == null || token.isEmpty) {
      throw Exception('⚠️ GitHub token سیٹ نہیں ہے۔ Settings میں ٹوکن شامل کریں۔');
    }

    try {
      final username = await _getUsername(token);
      final sanitizedRepoName = _sanitizeRepoName(repoName);
      final encodedContent = base64Encode(utf8.encode(content));

      final response = await http.put(
        Uri.parse('https://api.github.com/repos/$username/$sanitizedRepoName/contents/$filePath'),
        headers: {
          'Authorization': 'token $token',
          'Accept': 'application/vnd.github.v3+json',
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'message': commitMessage,
          'content': encodedContent,
          'branch': branch,
          'committer': {
            'name': 'Aladdin AI App Factory',
            'email': 'hello@aladdin.app'
          }
        }),
      );

      if (response.statusCode == 201 || response.statusCode == 200) {
        print('✅ File uploaded successfully: $filePath');
      } else {
        final errorBody = jsonDecode(response.body);
        final errorMessage = errorBody['message'] ?? 'Upload failed';
        
        if (errorMessage.contains('already exists')) {
          // فائل پہلے سے موجود ہے، update کریں
          await _updateFile(
            token: token,
            username: username,
            repoName: sanitizedRepoName,
            filePath: filePath,
            content: content,
            branch: branch,
            commitMessage: 'Update: $commitMessage',
          );
        } else {
          throw Exception('فائل اپلوڈ ناکام: $errorMessage');
        }
      }
    } catch (e) {
      throw Exception('فائل اپلوڈ میں خرابی: $e');
    }
  }

  /// 🔹 موجودہ فائل اپڈیٹ کریں
  Future<void> _updateFile({
    required String token,
    required String username,
    required String repoName,
    required String filePath,
    required String content,
    required String branch,
    required String commitMessage,
  }) async {
    try {
      // پہلے موجودہ فائل کا SHA حاصل کریں
      final existingFileResponse = await http.get(
        Uri.parse('https://api.github.com/repos/$username/$repoName/contents/$filePath'),
        headers: {
          'Authorization': 'token $token',
          'Accept': 'application/vnd.github.v3+json',
        },
      );

      String? sha;
      if (existingFileResponse.statusCode == 200) {
        final existingFileData = jsonDecode(existingFileResponse.body);
        sha = existingFileData['sha'];
      }

      final encodedContent = base64Encode(utf8.encode(content));

      final response = await http.put(
        Uri.parse('https://api.github.com/repos/$username/$repoName/contents/$filePath'),
        headers: {
          'Authorization': 'token $token',
          'Accept': 'application/vnd.github.v3+json',
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'message': commitMessage,
          'content': encodedContent,
          'branch': branch,
          'sha': sha, // موجودہ فائل کو اپڈیٹ کرنے کے لیے SHA ضروری ہے
          'committer': {
            'name': 'Aladdin AI App Factory',
            'email': 'hello@aladdin.app'
          }
        }),
      );

      if (response.statusCode == 200 || response.statusCode == 201) {
        print('✅ File updated successfully: $filePath');
      } else {
        throw Exception('فائل اپڈیٹ ناکام: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('فائل اپڈیٹ میں خرابی: $e');
    }
  }

  /// 🔹 مکمل پروجیکٹ اپلوڈ کریں
  Future<void> uploadCompleteProject({
    required String repoName,
    required Map<String, String> files, // filePath -> content
    String branch = 'main',
  }) async {
    final token = await getSavedToken();
    if (token == null) {
      throw Exception('⚠️ GitHub token سیٹ نہیں ہے۔');
    }

    try {
      final username = await _getUsername(token);
      final sanitizedRepoName = _sanitizeRepoName(repoName);

      // ہر فائل اپلوڈ کریں
      for (final entry in files.entries) {
        final filePath = entry.key;
        final content = entry.value;

        await uploadFile(
          repoName: sanitizedRepoName,
          filePath: filePath,
          content: content,
          branch: branch,
          commitMessage: 'Add $filePath - Aladdin AI Project',
        );

        // تھوڑا سا وقفہ دیں تاکہ GitHub rate limit نہ ہو
        await Future.delayed(const Duration(milliseconds: 500));
      }

      print('✅ Complete project uploaded with ${files.length} files');
    } catch (e) {
      throw Exception('مکمل پروجیکٹ اپلوڈ ناکام: $e');
    }
  }

  /// 🔹 Repository کا لنک حاصل کریں
  Future<String> getRepoUrl(String repoName) async {
    try {
      final token = await getSavedToken();
      if (token == null) {
        throw Exception('GitHub token not set');
      }

      final username = await _getUsername(token);
      final sanitizedRepoName = _sanitizeRepoName(repoName);
      
      return 'https://github.com/$username/$sanitizedRepoName';
    } catch (e) {
      throw Exception('Repository لنک حاصل کرنے میں ناکامی: $e');
    }
  }
}
