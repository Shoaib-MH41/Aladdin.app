import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';

class GitHubService {
  static const String _tokenKey = 'github_token';
  final FlutterSecureStorage _secureStorage = const FlutterSecureStorage();

  /// 🔹 GitHub Token حاصل کریں (secure storage → fallback SharedPreferences)
  Future<String?> getSavedToken() async {
    try {
      // secure storage check
      String? token = await _secureStorage.read(key: _tokenKey);
      if (token != null && token.isNotEmpty) return token;

      // fallback migrate old data
      final prefs = await SharedPreferences.getInstance();
      token = prefs.getString(_tokenKey);
      if (token != null) {
        await _secureStorage.write(key: _tokenKey, value: token);
        await prefs.remove(_tokenKey);
      }
      return token;
    } catch (e) {
      print('⚠️ [GitHubService] Token read error: $e');
      return null;
    }
  }

  /// 🔹 Token محفوظ کریں (Encrypted)
  Future<void> saveToken(String token) async {
    try {
      await _secureStorage.write(key: _tokenKey, value: token.trim());
      print('✅ [GitHubService] Token securely saved');
    } catch (e) {
      throw Exception('❌ Token save failed: $e');
    }
  }

  /// 🔹 Token حذف کریں
  Future<void> removeToken() async {
    try {
      await _secureStorage.delete(key: _tokenKey);
      print('🗑️ [GitHubService] Token removed');
    } catch (e) {
      throw Exception('❌ Token remove failed: $e');
    }
  }

  /// 🔹 GitHub کنکشن چیک کریں
  Future<bool> checkConnection() async {
    try {
      final response = await http.get(Uri.parse('https://api.github.com'));
      if (response.statusCode == 200) {
        print('✅ [GitHubService] Connection successful');
        return true;
      } else {
        print('❌ [GitHubService] Connection failed: ${response.statusCode}');
        return false;
      }
    } catch (e) {
      print('⚠️ [GitHubService] Connection error: $e');
      return false;
    }
  }

  /// 🔹 یوزرنیم حاصل کریں
  Future<String> _getUsername(String token) async {
    try {
      final response = await http.get(
        Uri.parse('https://api.github.com/user'),
        headers: {
          'Authorization': 'token $token',
          'Accept': 'application/vnd.github.v3+json',
        },
      );

      if (response.statusCode == 200) {
        final userData = jsonDecode(response.body);
        return userData['login'];
      } else {
        throw Exception('❌ Username fetch failed: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('❌ Username fetch error: $e');
    }
  }

  /// 🔹 نیا Repository بنائیں
  Future<String> createRepository(String repoName,
      {String? description = 'Auto-generated by Aladdin AI App Factory 🚀',
      bool private = true}) async {
    final token = await getSavedToken();
    if (token == null || token.isEmpty) {
      throw Exception('⚠️ GitHub token not set. Please add your token in settings.');
    }

    try {
      final response = await http.post(
        Uri.parse('https://api.github.com/user/repos'),
        headers: {
          'Authorization': 'token $token',
          'Accept': 'application/vnd.github.v3+json',
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'name': repoName.replaceAll(' ', '_'),
          'description': description,
          'private': private,
          'auto_init': true,
        }),
      );

      if (response.statusCode == 201) {
        final repoData = jsonDecode(response.body);
        print('✅ Repository created: ${repoData['html_url']}');
        return repoData['html_url'];
      } else if (response.statusCode == 422) {
        // Repository پہلے سے موجود ہے
        final username = await _getUsername(token);
        return 'https://github.com/$username/${repoName.replaceAll(' ', '_')}';
      } else {
        print('❌ [GitHubService] Repo creation failed: ${response.body}');
        throw Exception('GitHub Error: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('⚠️ GitHub connection failed: $e');
    }
  }

  /// 🔹 فائل اپلوڈ کریں (e.g., main.dart, index.html وغیرہ)
  Future<void> uploadFile({
    required String repoName,
    required String filePath,
    required String content,
    String branch = 'main',
  }) async {
    final token = await getSavedToken();
    if (token == null || token.isEmpty) {
      throw Exception('⚠️ GitHub token not set. Please add your token in settings.');
    }

    try {
      final username = await _getUsername(token);
      final encodedContent = base64Encode(utf8.encode(content));

      final response = await http.put(
        Uri.parse('https://api.github.com/repos/$username/$repoName/contents/$filePath'),
        headers: {
          'Authorization': 'token $token',
          'Accept': 'application/vnd.github.v3+json',
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'message': '🪄 Added $filePath via Aladdin AI App Factory',
          'content': encodedContent,
          'branch': branch,
        }),
      );

      if (response.statusCode == 201 || response.statusCode == 200) {
        print('✅ File uploaded: $filePath');
      } else {
        final errorBody = jsonDecode(response.body);
        throw Exception('❌ Upload failed: ${errorBody['message']}');
      }
    } catch (e) {
      throw Exception('⚠️ File upload failed: $e');
    }
  }
}
